package io.kotest.property.arbitrary

import io.kotest.property.RandomSource
import io.kotest.property.Sample
import io.kotest.property.Shrinker
import io.kotest.property.sampleOf
import kotlin.jvm.JvmOverloads

/**
 * Returns an [Arb] whose values are chosen randomly from those in the supplied collection.
 * May not cover all items. If you want an exhaustive selection from the list, see [Exhaustive.collection]
 */
fun <T> Arb.Companion.collection(collection: Collection<T>): Arb<T> = arb { collection.random(it.random) }

/**
 * Returns an [Arb] whose of values are a list of values generated by the given arb.
 * The size of each list is determined randomly up to the specified [max].
 */
@JvmOverloads
fun <A> Arb.Companion.list(arb: Arb<A>, maxSize: Int = 100): Arb<List<A>> = object : Arb<List<A>> {

   init {
      require(maxSize >= 0) { "maxSize must be positive" }
   }

   override fun edgecases(): List<List<A>> = listOf(arb.edgecases().take(maxSize).toList())

   override fun sample(rs: RandomSource): Sample<List<A>> {
      val size = rs.random.nextInt(maxSize)
      val list = generateSequence { arb.sample(rs) }.map { it.value }.take(size).toList()
      return sampleOf(list, ListShrinker())
   }
}

class ListShrinker<A> : Shrinker<List<A>> {
   override fun shrink(value: List<A>): List<List<A>> {
      return if (value.isEmpty()) emptyList() else {
         listOf(
            emptyList(),
            value.takeLast(1),
            value.take(value.size / 3),
            value.take(value.size / 2),
            value.take(value.size * 2 / 3),
            value.dropLast(1)
         )
      }
   }
}
