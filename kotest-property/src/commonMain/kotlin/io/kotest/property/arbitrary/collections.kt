package io.kotest.property.arbitrary

import io.kotest.property.Gen
import io.kotest.property.RandomSource
import io.kotest.property.Sample
import io.kotest.property.Shrinker
import io.kotest.property.sampleOf
import kotlin.jvm.JvmOverloads
import kotlin.random.nextInt

/**
 * Returns an [Arb] whose values are chosen randomly from those in the supplied collection.
 * May not cover all items. If you want an exhaustive selection from the list, see [Exhaustive.collection]
 */
fun <T> Arb.Companion.collection(collection: Collection<T>): Arb<T> = arb { collection.random(it.random) }

/**
 * Returns an [Arb] whose of values are a set of values generated by the given element generator.
 * The size of each set is determined randomly up to the specified [max].
 *
 * Note: This may fail to terminate if the element generator cannot produce a large enough number of
 * unique items to satify the required set size
 */
@JvmOverloads
fun <A> Arb.Companion.set(gen: Gen<A>, range: IntRange = 0..100): Arb<Set<A>> = object : Arb<Set<A>> {
   override fun edgecases(): List<Set<A>> = emptyList()

   override fun sample(rs: RandomSource): Sample<Set<A>> {
      val size = rs.random.nextInt(range)
      val set = mutableSetOf<A>()
      gen.generate(rs).takeWhile { set.size < size }.forEach { set.add(it.value) }
      return Sample(set)
   }
}

/**
 * Returns an [Arb] whose of values are a list of values generated by the given generator.
 * The size of each list is determined randomly up to the specified [max].
 *
 * Shrinking is performed by removing elements from the list until the empty list.
 */
@JvmOverloads
fun <A> Arb.Companion.list(gen: Gen<A>, range: IntRange = 0..100): Arb<List<A>> = object : Arb<List<A>> {
   override fun edgecases(): List<List<A>> = emptyList()

   override fun sample(rs: RandomSource): Sample<List<A>> {
      val size = rs.random.nextInt(range)
      val list = gen.generate(rs).take(size).map { it.value }.toList()
      return sampleOf(list, ListShrinker())
   }
}

class ListShrinker<A> : Shrinker<List<A>> {
   override fun shrink(value: List<A>): List<List<A>> {
      return if (value.isEmpty()) emptyList() else {
         listOf(
            emptyList(),
            value.takeLast(1),
            value.take(value.size / 3),
            value.take(value.size / 2),
            value.take(value.size * 2 / 3),
            value.dropLast(1)
         )
      }
   }
}
