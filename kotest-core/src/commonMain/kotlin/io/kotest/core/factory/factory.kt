package io.kotest.core.factory

import io.kotest.core.test.AssertionMode
import io.kotest.core.SourceRef
import io.kotest.core.Tag
import io.kotest.core.spec.SpecConfiguration
import io.kotest.core.test.*
import io.kotest.core.extensions.SpecLevelExtension
import io.kotest.core.extensions.TestListener

/**
 * A [TestFactory] is a generator of tests along with optional configuration and
 * callbacks related to those tests. A test factory can be added to a [SpecConfiguration] and the
 * tests generated by the factory will be included in that spec.
 */
data class TestFactory(
   val factoryId: TestFactoryId,
   val tests: List<DynamicTest>,
   val tags: Set<Tag>,
   val assertionMode: AssertionMode?,
   val listeners: List<TestListener>,
   val extensions: List<SpecLevelExtension>,
   val factories: List<TestFactory>
)

/**
 * A [DynamicTest] is an intermediate test state held by a factory. Once the factory is added to a
 * [SpecConfiguration] and the spec is created, the factories dynamic tests will be added to the spec
 * as fully fledged [TestCase]s.
 */
data class DynamicTest(
   val name: String,
   val test: suspend TestContext.() -> Unit,
   val config: TestCaseConfig,
   val type: TestType,
   val source: SourceRef
)
